// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// debug
std::vector<int> debug(std::vector<int> x);
RcppExport SEXP _treecoding_debug(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(debug(x));
    return rcpp_result_gen;
END_RCPP
}
// debug2
std::vector<double> debug2(std::vector<double> x);
RcppExport SEXP _treecoding_debug2(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(debug2(x));
    return rcpp_result_gen;
END_RCPP
}
// debug3
std::vector<int> debug3(Eigen::MatrixXf X, int col, float comp);
RcppExport SEXP _treecoding_debug3(SEXP XSEXP, SEXP colSEXP, SEXP compSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXf >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type col(colSEXP);
    Rcpp::traits::input_parameter< float >::type comp(compSEXP);
    rcpp_result_gen = Rcpp::wrap(debug3(X, col, comp));
    return rcpp_result_gen;
END_RCPP
}
// debug4
std::vector<int> debug4(Eigen::MatrixXi X, int col, std::vector<int> matches);
RcppExport SEXP _treecoding_debug4(SEXP XSEXP, SEXP colSEXP, SEXP matchesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXi >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type col(colSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type matches(matchesSEXP);
    rcpp_result_gen = Rcpp::wrap(debug4(X, col, matches));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_treecoding_debug", (DL_FUNC) &_treecoding_debug, 1},
    {"_treecoding_debug2", (DL_FUNC) &_treecoding_debug2, 1},
    {"_treecoding_debug3", (DL_FUNC) &_treecoding_debug3, 3},
    {"_treecoding_debug4", (DL_FUNC) &_treecoding_debug4, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_treecoding(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
