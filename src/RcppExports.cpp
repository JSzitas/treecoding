// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// debug3
std::vector<int> debug3(Eigen::MatrixXf X, int col, float comp);
RcppExport SEXP _treecoding_debug3(SEXP XSEXP, SEXP colSEXP, SEXP compSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXf >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type col(colSEXP);
    Rcpp::traits::input_parameter< float >::type comp(compSEXP);
    rcpp_result_gen = Rcpp::wrap(debug3(X, col, comp));
    return rcpp_result_gen;
END_RCPP
}
// debug4
std::vector<int> debug4(Eigen::MatrixXi X, int col, std::vector<int> matches);
RcppExport SEXP _treecoding_debug4(SEXP XSEXP, SEXP colSEXP, SEXP matchesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXi >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type col(colSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type matches(matchesSEXP);
    rcpp_result_gen = Rcpp::wrap(debug4(X, col, matches));
    return rcpp_result_gen;
END_RCPP
}
// debug5
int debug5(Eigen::MatrixXf X, Eigen::MatrixXi Y);
RcppExport SEXP _treecoding_debug5(SEXP XSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXf >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(debug5(X, Y));
    return rcpp_result_gen;
END_RCPP
}
// smpl
std::vector<int> smpl(int size);
RcppExport SEXP _treecoding_smpl(SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(smpl(size));
    return rcpp_result_gen;
END_RCPP
}
// sample_debug
std::vector<float> sample_debug(float a, float b, int size);
RcppExport SEXP _treecoding_sample_debug(SEXP aSEXP, SEXP bSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type a(aSEXP);
    Rcpp::traits::input_parameter< float >::type b(bSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_debug(a, b, size));
    return rcpp_result_gen;
END_RCPP
}
// shuffler
void shuffler(int size);
RcppExport SEXP _treecoding_shuffler(SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    shuffler(size);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_treecoding_debug3", (DL_FUNC) &_treecoding_debug3, 3},
    {"_treecoding_debug4", (DL_FUNC) &_treecoding_debug4, 3},
    {"_treecoding_debug5", (DL_FUNC) &_treecoding_debug5, 2},
    {"_treecoding_smpl", (DL_FUNC) &_treecoding_smpl, 1},
    {"_treecoding_sample_debug", (DL_FUNC) &_treecoding_sample_debug, 3},
    {"_treecoding_shuffler", (DL_FUNC) &_treecoding_shuffler, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_treecoding(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
