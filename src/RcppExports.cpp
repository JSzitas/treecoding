// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// tree
void tree(std::vector<std::vector<float>> num_cols, std::vector<std::vector<int>> cat_cols, int max_depth, int min_nodesz);
RcppExport SEXP _treecoding_tree(SEXP num_colsSEXP, SEXP cat_colsSEXP, SEXP max_depthSEXP, SEXP min_nodeszSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::vector<float>> >::type num_cols(num_colsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<int>> >::type cat_cols(cat_colsSEXP);
    Rcpp::traits::input_parameter< int >::type max_depth(max_depthSEXP);
    Rcpp::traits::input_parameter< int >::type min_nodesz(min_nodeszSEXP);
    tree(num_cols, cat_cols, max_depth, min_nodesz);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_treecoding_tree", (DL_FUNC) &_treecoding_tree, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_treecoding(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
